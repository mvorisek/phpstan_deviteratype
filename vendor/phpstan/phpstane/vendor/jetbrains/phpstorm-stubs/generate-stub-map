#!/usr/bin/env php
<?php 
declare (strict_types=1);
namespace _HumbugBox221ad6f1b81f\JetBrains\PHPStormStub;

use DirectoryIterator;
use RecursiveDirectoryIterator;
use RecursiveIteratorIterator;
use SplFileInfo;
use Exception;
use PhpParser\Node;
use PhpParser\NodeTraverser;
use PhpParser\NodeVisitor\NameResolver;
use PhpParser\NodeVisitorAbstract;
use PhpParser\ParserFactory;
use PhpParser\PrettyPrinter\Standard;
use RuntimeException;
use function array_map;
use function count;
use function file_get_contents;
use function file_put_contents;
use function in_array;
use function ksort;
use function preg_match;
use function sprintf;
use function str_replace;
use function strlen;
use function strtolower;
use function substr;
use function var_export;
use const PHP_EOL;
(function () : void {
    require __DIR__ . '/vendor/autoload.php';
    $mapFile = __DIR__ . '/PhpStormStubsMap.php';
    class InvalidConstantNode extends \RuntimeException
    {
        public static function create(\PhpParser\Node $node) : self
        {
            return new self(\sprintf('Invalid constant node (first 50 characters: %s)', \substr((new \PhpParser\PrettyPrinter\Standard())->prettyPrint([$node]), 0, 50)));
        }
    }
    class InvalidFileLocation extends \RuntimeException
    {
    }
    /**
     * @throws InvalidFileLocation
     */
    function assertReadableFile(string $filename) : void
    {
        if (empty($filename)) {
            throw new \_HumbugBox221ad6f1b81f\JetBrains\PHPStormStub\InvalidFileLocation('Filename was empty');
        }
        if (!\file_exists($filename)) {
            throw new \_HumbugBox221ad6f1b81f\JetBrains\PHPStormStub\InvalidFileLocation(\sprintf('File "%s" does not exist', $filename));
        }
        if (!\is_readable($filename)) {
            throw new \_HumbugBox221ad6f1b81f\JetBrains\PHPStormStub\InvalidFileLocation(\sprintf('File "%s" is not readable', $filename));
        }
        if (!\is_file($filename)) {
            throw new \_HumbugBox221ad6f1b81f\JetBrains\PHPStormStub\InvalidFileLocation(\sprintf('"%s" is not a file', $filename));
        }
    }
    /**
     * @throws InvalidConstantNode
     */
    function assertValidDefineFunctionCall(\PhpParser\Node\Expr\FuncCall $node) : void
    {
        if (!$node->name instanceof \PhpParser\Node\Name) {
            throw \_HumbugBox221ad6f1b81f\JetBrains\PHPStormStub\InvalidConstantNode::create($node);
        }
        if ($node->name->toLowerString() !== 'define') {
            throw \_HumbugBox221ad6f1b81f\JetBrains\PHPStormStub\InvalidConstantNode::create($node);
        }
        if (!\in_array(\count($node->args), [2, 3], \true)) {
            throw \_HumbugBox221ad6f1b81f\JetBrains\PHPStormStub\InvalidConstantNode::create($node);
        }
        if (!$node->args[0]->value instanceof \PhpParser\Node\Scalar\String_) {
            throw \_HumbugBox221ad6f1b81f\JetBrains\PHPStormStub\InvalidConstantNode::create($node);
        }
        $valueNode = $node->args[1]->value;
        if ($valueNode instanceof \PhpParser\Node\Expr\FuncCall) {
            throw \_HumbugBox221ad6f1b81f\JetBrains\PHPStormStub\InvalidConstantNode::create($node);
        }
        if ($valueNode instanceof \PhpParser\Node\Expr\Variable) {
            throw \_HumbugBox221ad6f1b81f\JetBrains\PHPStormStub\InvalidConstantNode::create($node);
        }
    }
    $phpStormStubsDirectory = __DIR__;
    $fileVisitor = new class extends \PhpParser\NodeVisitorAbstract
    {
        /** @var string[] */
        private $classNames = [];
        /** @var string[] */
        private $functionNames = [];
        /** @var string[] */
        private $constantNames = [];
        /**
         * {@inheritdoc}
         */
        public function enterNode(\PhpParser\Node $node) : ?int
        {
            if ($node instanceof \PhpParser\Node\Stmt\ClassLike) {
                $this->classNames[] = $node->namespacedName->toString();
                return \PhpParser\NodeTraverser::DONT_TRAVERSE_CHILDREN;
            }
            if ($node instanceof \PhpParser\Node\Stmt\Function_) {
                $this->functionNames[] = $node->namespacedName->toString();
                return \PhpParser\NodeTraverser::DONT_TRAVERSE_CHILDREN;
            }
            if ($node instanceof \PhpParser\Node\Const_) {
                $this->constantNames[] = $node->namespacedName->toString();
                return \PhpParser\NodeTraverser::DONT_TRAVERSE_CHILDREN;
            }
            if ($node instanceof \PhpParser\Node\Expr\FuncCall) {
                try {
                    assertValidDefineFunctionCall($node);
                } catch (\_HumbugBox221ad6f1b81f\JetBrains\PHPStormStub\InvalidConstantNode $e) {
                    return null;
                }
                /** @var Node\Scalar\String_ $nameNode */
                $nameNode = $node->args[0]->value;
                if (\count($node->args) === 3 && $node->args[2]->value instanceof \PhpParser\Node\Expr\ConstFetch && $node->args[2]->value->name->toLowerString() === 'true') {
                    $this->constantNames[] = \strtolower($nameNode->value);
                }
                $this->constantNames[] = $nameNode->value;
                return \PhpParser\NodeTraverser::DONT_TRAVERSE_CHILDREN;
            }
            return null;
        }
        /**
         * @return string[]
         */
        public function getClassNames() : array
        {
            return $this->classNames;
        }
        /**
         * @return string[]
         */
        public function getFunctionNames() : array
        {
            return $this->functionNames;
        }
        /**
         * @return string[]
         */
        public function getConstantNames() : array
        {
            return $this->constantNames;
        }
        public function clear() : void
        {
            $this->classNames = [];
            $this->functionNames = [];
            $this->constantNames = [];
        }
    };
    $phpParser = (new \PhpParser\ParserFactory())->create(\PhpParser\ParserFactory::PREFER_PHP7);
    $nodeTraverser = new \PhpParser\NodeTraverser();
    $nodeTraverser->addVisitor(new \PhpParser\NodeVisitor\NameResolver());
    $nodeTraverser->addVisitor($fileVisitor);
    $map = ['classes' => [], 'functions' => [], 'constants' => []];
    foreach (new \DirectoryIterator($phpStormStubsDirectory) as $directoryInfo) {
        /** @var DirectoryIterator $directoryInfo */
        if ($directoryInfo->isDot()) {
            continue;
        }
        if (!$directoryInfo->isDir()) {
            continue;
        }
        if (\in_array($directoryInfo->getBasename(), ['tests', 'meta', 'vendor'], \true)) {
            continue;
        }
        $iterator = new \RecursiveIteratorIterator(new \RecursiveDirectoryIterator($directoryInfo->getPathName(), \RecursiveDirectoryIterator::SKIP_DOTS));
        /** @var SplFileInfo $fileInfo */
        foreach ($iterator as $fileInfo) {
            if (!\preg_match('/\\.php$/', $fileInfo->getBasename())) {
                continue;
            }
            assertReadableFile($fileInfo->getPathname());
            echo \sprintf('Parsing "%s"', $fileInfo->getPathname()) . \PHP_EOL;
            $ast = $phpParser->parse(\file_get_contents($fileInfo->getPathname()));
            $nodeTraverser->traverse($ast);
            foreach ($fileVisitor->getClassNames() as $className) {
                $map['classes'][$className] = $fileInfo->getPathname();
            }
            foreach ($fileVisitor->getFunctionNames() as $functionName) {
                $map['functions'][$functionName] = $fileInfo->getPathname();
            }
            foreach ($fileVisitor->getConstantNames() as $constantName) {
                $map['constants'][$constantName] = $fileInfo->getPathname();
            }
            $fileVisitor->clear();
        }
    }
    $mapWithRelativeFilePaths = \array_map(static function (array $files) use($phpStormStubsDirectory) : array {
        \ksort($files);
        return \array_map(static function (string $filePath) use($phpStormStubsDirectory) : string {
            return \str_replace('\\', '/', \substr($filePath, \strlen($phpStormStubsDirectory) + 1));
        }, $files);
    }, $map);
    $exportedClasses = \var_export($mapWithRelativeFilePaths['classes'], \true);
    $exportedFunctions = \var_export($mapWithRelativeFilePaths['functions'], \true);
    $exportedConstants = \var_export($mapWithRelativeFilePaths['constants'], \true);
    $output = <<<PHP
<?php

declare(strict_types=1);

namespace JetBrains\\PHPStormStub;

/**
 * This is a generated file, do not modify it directly!
 */
final class PhpStormStubsMap
{
const CLASSES = {$exportedClasses};

const FUNCTIONS = {$exportedFunctions};

const CONSTANTS = {$exportedConstants};
}
PHP;
    $bytesWritten = @\file_put_contents($mapFile, $output, \LOCK_EX);
    if ($bytesWritten === \false) {
        throw new \Exception(\sprintf('File "%s" is not writeable.', $mapFile));
    }
    exit('Done' . \PHP_EOL);
})();
